Video 4
Hapus git
rm -rf .git

Video 5 
Free themes for Bootstrap
https://bootswatch.com/
1. download
2. tarok di src
3. import di index.js

install bootstrap
npm install react-bootstrap

import fontawesome untuk icon
1. dari https://cdnjs.com/libraries/font-awesome
2. copy link tag
3. import di index.html

video 7
di rating.js
kirim default props
Rating.defaultProps = {
  color: '#f8e825',
};

proyotpye untuk type dari propsnya
Rating.propTypes = {
  value: PropTypes.number.isRequired,
  text: PropTypes.string.isRequired,
  color: PropTypes.string
};

video 8
install react router
npm i react-router-dom react-router-bootstrap
react-router-bootstrap ==> agar bisa link

di header.js
import {LinkContainer} from 'react-router-bootstrap'
agar tidak loading ketika pindah halaman

Video 10
TONTON ULANG UNTUK LEBIH DETAIL

GET	= GET DATA
POST	= adding data
PUT	= update data
DELETE	= delete data

Video 11
membuat folder backend
npm init

instal express di root
npm i express

menjalankan server
node backend/server atau npm run start

Video 12
npm i axios
axios untuk membuat http request ke backend / fetch api

tidak ada error cors 
karena pakai PROXY di package.json frontend/reactnya
"proxy": "http://127.0.0.1:5000"

Kalo pemanggilan data gunakan async await
  useEffect(() => {
    const fetchProduct = async () => {
      const { data } = await axios.get(`/api/products/${match.params.id}`);
      setProduct(data);
    };
    fetchProduct();
  }, []);


Video 13
npm i -D nodemon concurrently
untuk menjalankan backend dan frontend bersamaan

Video 14
dotenv = untuk api key, jwt, database 
	untuk informasi sensitif
npm i dotenv
lihat dokumentasi di https://www.npmjs.com/package/dotenv

Video 15
require itu js biasa
di convert jadi js modern/ ecmascript
harus node --version > 14.0

di package.json root tambah
"type":"module",

kalao js file tambah .js

Video 17
npm i mongoose
pembuatan folder config/db.js

kalau promise, kayak then.cacth try catch itu perlu async await

Video 18
npm i colors
untuk membedakan warna 
- server jalan
- database atlas
- error

Video 19
Membuat skema di models backend

Video 20
npm i bcryptjs

kalo bcrypt doang bisa ada masalah

Video 21
Database seeder supaya mudah input data

node backend/seed -d
untuk destroy data

di package.json
   "data:import": "node backend/seeder",
    "data:destroy": "node backend/seeder -d"

Video 22
Fetch data from DB
express-async-handler
Simple middleware for handling exceptions inside of async express routes and passing them to your express error handlers.
npm i express-async-handler

Video 24
Error handling API

Video 25
Redux tidak hanya untuk react

Video 26
npm i redux react-redux redux-thunk redux-devtools-extension

redux bisa dipakai di angular
react-redux	= redux untuk react
redux-thunk	= utk buat async request, karena berhubungan server
redux-devtools-extension = agar bisa dipake extensi redux-devtools di browser

pembuatan file store.js

Video 28
useDispatch = call action
useSelector = select part of state

Video 31
 <Route path='/cart/:id?' component={CartScreen} />
          {/* opisonal idnya */}


Video 32
getState = get entire state tree

Video 33
import {useDispatch,useSelector} from 'react-redux'
sering dipake di redux

Video 34
ubah cartscreen

Video 35
remove cart item

video 36
pembuatan controller pada backend

video 37
user model

// Sebelum brcrypt di controller
userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};


Video 38
JWT
Authentication	= ketika take email dan password ke database
Authorization	= user access

Video 39
untuk membuat token butuh ==> .sign
var token = jwt.sign({ foo: 'bar' }, 'shhhhh');
shhhh ==> secret code

pembuatan folder utils/generateToken

Video 40
token dikirim ke headers Authorization
lihat GET /api/users/profile di postman
token diambil dari headers

Video 41
Menambahkan/simpan token ke postman

di POST /api/users/login 
test tambah:
pm.environment.set("TOKEN",pm.response.json().token)

di GET /api/users/profile
authorization:
type: bearer token
token: {{TOKEN}}

cek di environment pojok kanan atas

Video 42
Register user di postman

middleware enkrip password di model user
perubahan di userController, userModel,userRoutes

Video 43
User login
pembuatan userAction,userConstant,useReducer dan ubah store

Video 44
LoginScreen.js

ini kalo checkout tanpa login
 const redirect = location.search ? location.search.split('=')[1] : '/';

Video 45
Kalo mau action pakai useDispatch
kalo mau bawa state pakai useSelector

Video 46
Pembuatan register action,reducer,constant,screen

Video 47
Update profile di usercontroller
updateUserProfile

Video 48
Profile screen

Video 49
update user profile

kalau update dan detail harus ambil token nya, trus di konvert sama jwt buat dpt datanya

Video 51
penambahan shippingscreen, action,reducer, constants

Video 52
Nav di shipping, checkout steps

Video 53
payment screen,action,reducer, constants

Video 54
tampilan place order

Video 55
Backend Order controller

Video 57
orderController
// populate untuk cari data yang berkaitan


Video 63
Paypal
1. daftar paypal
2. https://developer.paypal.com/developer/applications/
3. https://developer.paypal.com/developer/accounts/
buat akun sandbox

1. create new app di my apps & credential
2. copy client id
AVyzU3rT85C2r_Kkkm-sVAQRoF3e42b726cVZEDBJKK7huDnEtwWf3_AG_396zxcSmhU_ZLCEgTRwmbW
3. tarok di .env
4. server.js 
app.get('api/config/paypal',(req,res)=>res.send(process.env.PAYPAL_CLIENT_ID))

Implement paypal
1. install paypal sdk script
https://developer.paypal.com/docs/checkout/reference/customize-sdk/
2. orderscreen import axios
3. tambah di useEffect
   const addPayPalScript = async () => {
      const { data: clientId } = await axios.get('/api/config/paypal');
      // console.log(clientId);
      const script = document.createElement('script')
      script.type='text/javascript'
      script.src=`https://paypal.com/sdk/js?client-id=${clientId}`
      script.async=true
    };
4. tambah useState
  const [sdkReady, setSdkReady] = useState(false);
5. di useEffect tambah
script.onload = () => {
	setSdkReady(true);
};
document.body.appendChild(script)

5. tambah
  const orderPay = useSelector((state) => state.orderPay);
  const { loading:loadingPay, success:successPay } = orderPay;
// di rename

6. di useEffect
  if (!order || order._id !== orderId || successPay) {
      dispatch(getOrderDetails(orderId));
    } else if (!order.isPaid) {
      if (!window.paypal) {
        addPayPalScript();
      } else {
        setSdkReady(true);
      }
    }

7. hasil script DOM ada di inspector paling bawah


8 .install di front end
npm i react-paypal-button-v2

9. tarok buttonpaypal di orderscreen


kalau pas klik button paypal gk login:
pergi account di sanbox
https://developer.paypal.com/developer/accounts/
lalu edit dan view salah satu akun

Video 64
urutan pembuatan
backend -> contsants -> reducer -> store -> action -> screen

Video 79
untuk upload file butuh multer,install di root
npm i multer

di root buat folder upload

buat uploadRoutes

buat folder jadi static, di server.js agar bisa diakses
lalu,
import path from 'path'

// di esmodule gk bisa mke __dirname, maka buat const berikut
const __dirname = path.resolve()

Video 82
 'Content-Type': 'application/json',

dipake kalau mau kirim data

Video 83
Morgan = logger ketika route di backend
install di root
npm i morgan 

Video 85
search box

karena dia embed, trus pke props.history maka di headernya

import { Route } from 'react-router-dom';
 <Route render={({ history }) => <SearchBox history={history} />} />

perubahan listproducts di action jadi kirim props

ubah productController

$regex == supaya pencarian tidak harus spesifik
$options='i' 


Video 86
Kalau mau liat pagination, productcontroller ubah 
const pageSize = 2;

Video 88 
React-helmet di front-end
npm i react-helmet

Video 89
deployment app

1. di front end
npm run build

2. folder buildnya di buat static

3. di backend
di serverjs
// Production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '/frontend/build')));

  app.get('*', (req, res) =>
    // ambil semua route
    res.sendFile(path.resolve(__dirname, 'frontend', 'build', 'index.html')),
  );
} else {
  app.get('/', (req, res) => {
    res.send('API is running....');
  });
}

4. ubah .env
ubah NODE_ENV = development menjadi
NODE_ENV = production

5. package.json di root
sekarang dijalankan cukup dengan npm run start (menjalankan servernya saja)

video 90
.env tidak diupload, ditulis di .gitignore untuk keamanan

tidak perlu npm run build untuk upload ke hiroku

1. install heroku cli
https://devcenter.heroku.com/articles/heroku-cli

2. di root login heroku
heroku login

3. heroku create ghanishopapp (nama bebas)
https://ghanishop.herokuapp.com/ | https://git.heroku.com/ghanishop.git


4. di root buat file
Procfile

atur file yang dijalankan
web: node backend/index.js

5. dipackge.json root
"heroku-postbuild":"NPM_CONFIG_PRODUCTION=false npm install --prefix frontend && npm run build --prefix frontend"

6. pilih menu deploy di heroku untuk remote
heroku git:remote -a ghanishop

7. git push heroku master
kalo mau ada perubahan lakukan lagi

8. klo mau liat error di
heroku logs

9. pergi ke heroku settings
config vars
isi sesusai di .env